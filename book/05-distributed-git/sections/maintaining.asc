=== Mantendo um Projeto

(((mantendo um projeto)))
Além de saber como contribuir efetivamente para um projeto, é provável que você precise saber como manter um.
Isso pode consistir em aceitar e aplicar patches gerados via `format-patch` e enviados por e-mail para você, ou integrar mudanças em branches remotas para repositórios que você adicionou como remotos ao seu projeto.
Seja mantendo um repositório canônico ou querendo ajudar verificando ou aprovando patches, você precisa saber como aceitar o trabalho de uma maneira que seja mais clara para outros colaboradores e sustentável para você a longo prazo.

==== Trabalhando em Branches de Tópico

(((branches, tópico)))
Quando você está pensando em integrar um novo trabalho, geralmente é uma boa ideia testá-lo em uma _branch de tópico_ — uma branch temporária feita especificamente para testar esse novo trabalho.
Dessa forma, fica fácil ajustar um patch individualmente e deixá-lo de lado se não estiver funcionando, até que você tenha tempo de voltar a ele.
Se você criar um nome simples para a branch com base no tema do trabalho que vai testar, como `ruby_client` ou algo semelhante e descritivo, será fácil lembrá-lo caso precise abandoná-lo por um tempo e voltar mais tarde.
O mantenedor do projeto Git tende a dar nomes a essas branches também — como `sc/ruby_client`, onde `sc` é uma abreviação da pessoa que contribuiu com o trabalho.
Como você deve lembrar, pode criar a branch a partir da sua branch `master` assim:

[source,console]
----
$ git branch sc/ruby_client master
----

Ou, se você também quiser alternar para ela imediatamente, pode usar a opção `checkout -b`:

[source,console]
----
$ git checkout -b sc/ruby_client master
----

Agora você está pronto para adicionar o trabalho contribuído que recebeu nesta branch de tópico e decidir se quer mesclá-lo nas suas branches de longo prazo.


==== Aplicando Patches por Email

(((email, aplicando patches por)))
Se você receber um patch por e-mail que precisa integrar ao seu projeto, você deve aplicar o patch na sua branch de tópico para avaliá-lo.
Existem duas maneiras de aplicar um patch enviado por e-mail: com `git apply` ou com `git am`.

===== Aplicando um Patch com apply

(((comandos git, apply)))
Se você recebeu o patch de alguém que o gerou com `git diff` ou alguma variação do comando Unix `diff` (o que não é recomendado; veja a próxima seção), você pode aplicá-lo com o comando `git apply`.
Assumindo que você salvou o patch em `/tmp/patch-ruby-client.patch`, você pode aplicar o patch assim:

[source,console]
----
$ git apply /tmp/patch-ruby-client.patch
----

Isso modifica os arquivos no seu diretório de trabalho.
É quase idêntico a rodar o comando `patch -p1` para aplicar o patch, embora seja mais cuidadoso e aceite menos correspondências imprecisas do que o `patch`.
Também lida com adições, exclusões e renomeações de arquivos se elas forem descritas no formato `git diff`, o que o `patch` não faria.
Por fim, o `git apply` é um modelo de "aplicar tudo ou abortar tudo", onde ou tudo é aplicado ou nada é. Já o `patch` pode aplicar parcialmente os arquivos de patch, deixando seu diretório de trabalho em um estado estranho.
O `git apply` é, de maneira geral, muito mais conservador que o `patch`.
Ele não criará um commit para você — após executá-lo, você deve preparar e fazer o commit das mudanças manualmente.

Você também pode usar o `git apply` para verificar se um patch pode ser aplicado corretamente antes de tentar aplicá-lo de fato — basta rodar `git apply --check` com o patch:

[source,console]
----
$ git apply --check 0001-see-if-this-helps-the-gem.patch
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
----

Se não houver saída, o patch deve ser aplicado corretamente.
Este comando também sai com um status diferente de zero se a verificação falhar, então você pode usá-lo em scripts, caso queira.

===== Aplicando um Patch com `am`

(((comandos git, am)))
Se o contribuidor for um usuário Git e foi bom o suficiente para usar o comando `format-patch` para gerar seu patch, seu trabalho será mais fácil, pois o patch contém informações do autor e uma mensagem de commit para você.
Se possível, incentive seus contribuidores a usar o `format-patch` em vez de `diff` para gerar patches para você.
Você só precisará usar o `git apply` para patches legados e coisas do tipo.

Para aplicar um patch gerado pelo `format-patch`, você usa o `git am` (o comando é nomeado `am` porque é usado para "aplicar uma série de patches de uma caixa de correio").
Tecnicamente, o `git am` foi criado para ler um arquivo mbox, que é um formato simples de texto para armazenar uma ou mais mensagens de e-mail em um arquivo de texto.
Ele se parece com isso:

[source,console]
----
From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001
From: Jessica Smith <jessica@example.com>
Date: Sun, 6 Apr 2008 10:17:23 -0700
Subject: [PATCH 1/2] Add limit to log function

Limit log functionality to the first 20
----

Este é o começo da saída do comando `git format-patch` que você viu na seção anterior; também representa um formato de e-mail mbox válido.
Se alguém lhe enviou o patch corretamente usando `git send-email`, e você o baixou no formato mbox, então você pode apontar o `git am` para esse arquivo mbox e ele começará a aplicar todos os patches que encontrar.
Se você usar um cliente de e-mail que possa salvar vários e-mails no formato mbox, pode salvar uma série de patches em um arquivo e depois usar o `git am` para aplicá-los um por um.

No entanto, se alguém enviou um arquivo de patch gerado via `git format-patch` para um sistema de tickets ou algo similar, você pode salvá-lo localmente e depois passar esse arquivo salvo no seu disco para o `git am` para aplicá-lo:

[source,console]
----
$ git am 0001-limit-log-function.patch
Applying: Add limit to log function
----

Você verá que ele foi aplicado corretamente e criou automaticamente o novo commit para você.
As informações do autor são retiradas dos cabeçalhos `From` e `Date` do e-mail, e a mensagem do commit é retirada do `Subject` e do corpo (antes do patch) do e-mail.
Por exemplo, se este patch foi aplicado a partir do exemplo mbox acima, o commit gerado seria algo como:

[source,console]
----
$ git log --pretty=fuller -1
commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
Author:     Jessica Smith <jessica@example.com>
AuthorDate: Sun Apr 6 10:17:23 2008 -0700
Commit:     Scott Chacon <schacon@gmail.com>
CommitDate: Thu Apr 9 09:19:06 2009 -0700

   Add limit to log function

   Limit log functionality to the first 20
----

A informação de `Commit` indica quem aplicou o patch e o momento em que ele foi aplicado.
A informação de `Author` é a pessoa que originalmente criou o patch e quando ele foi criado.

Mas é possível que o patch não seja aplicado corretamente.
Talvez sua branch principal tenha divergido muito da branch de onde o patch foi gerado, ou o patch dependa de outro patch que você ainda não aplicou.
Nesse caso, o processo `git am` falhará e perguntará o que você deseja fazer:

[source,console]
----
$ git am 0001-see-if-this-helps-the-gem.patch
Applying: See if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Patch failed at 0001.
When you have resolved this problem run "git am --resolved".
If you would prefer to skip this patch, instead run "git am --skip".
To restore the original branch and stop patching run "git am --abort".
----

Este comando coloca marcadores de conflito em qualquer arquivo que tenha problemas, de forma similar a uma operação de merge ou rebase em conflito.
Você resolve esse problema da mesma maneira — edita o arquivo para resolver o conflito, prepara o novo arquivo e depois executa `git am --resolved` para continuar com o próximo patch:

[source,console]
----
$ (conserte o arquivo)
$ git add ticgit.gemspec
$ git am --resolved
Applying: See if this helps the gem
----

Se você quiser que o Git tente resolver o conflito de forma mais inteligente, pode passar a opção `-3` para ele, o que faz o Git tentar um merge de três vias.
Esta opção não é ativada por padrão porque não funciona se o commit em que o patch foi baseado não estiver no seu repositório.
Se você tiver esse commit — se o patch foi baseado em um commit público — então a opção `-3` é geralmente mais inteligente para aplicar um patch conflitante:

[source,console]
----
$ git am -3 0001-see-if-this-helps-the-gem.patch
Applying: See if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
No changes -- Patch already applied.
----

Neste caso, sem a opção `-3`, o patch seria considerado um conflito.
Como a opção `-3` foi usada, o patch foi aplicado corretamente.

Se você estiver aplicando vários patches de um mbox, também pode rodar o comando `am` em modo interativo, que para em cada patch que encontrar e pergunta se você deseja aplicá-lo:

[source,console]
----
$ git am -3 -i mbox
Commit Body is:
--------------------------
See if this helps the gem
--------------------------
Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all
----

Isso é útil se você tem vários patches salvos, porque você pode visualizar o patch primeiro se não se lembrar do que se trata, ou não aplicá-lo se já o tiver feito.

Quando todos os patches para o seu tópico forem aplicados e commitados na sua branch, você pode escolher como e se integrá-los em uma branch de longo prazo.

==== Verificando Branches Remotas

(((branches, remoto)))
Se a sua contribuição veio de um usuário Git que configurou seu próprio repositório, fez várias alterações nele e depois lhe enviou a URL do repositório e o nome da branch remota em que as mudanças estão, você pode adicioná-los como remoto e fazer merges localmente.

Por exemplo, se a Jessica lhe enviar um e-mail dizendo que ela tem um ótimo novo recurso na branch `ruby-client` do repositório dela em `git@example.com:ruby-client.git`, você pode fazer o seguinte:

[source,console]
----
$ git remote add jessica git@example.com:ruby-client.git
$ git fetch jessica
$ git checkout -b ruby-client jessica/ruby-client
----
Se ela lhe enviar outro e-mail mais tarde com outra branch contendo um ótimo novo recurso, você pode simplesmente fazer `fetch` e `checkout` porque já tem o remoto configurado.

Isso é mais útil se você estiver trabalhando consistentemente com uma pessoa.
Se alguém tem apenas um único patch para contribuir de vez em quando, então aceitá-lo por e-mail pode ser menos demorado do que exigir que todos rodem seus próprios servidores e tenham que adicionar e remover remotos constantemente para obter alguns patches.
Além disso, você provavelmente não vai querer ter centenas de remotos, cada um para alguém que contribui com apenas um patch ou dois.
No entanto, scripts e serviços hospedados podem facilitar isso — depende muito de como você desenvolve e como seus contribuintes desenvolvem.

A outra vantagem dessa abordagem é que você também obtém o histórico dos commits.
Embora você possa ter problemas legítimos de merge, você sabe em qual parte do seu histórico o trabalho deles está baseado; um merge de três vias adequado é o padrão, em vez de ter que fornecer um `-3` e torcer para que o patch tenha sido gerado a partir de um commit público ao qual você tem acesso.

Se você não está trabalhando com uma pessoa de forma constante, mas ainda assim quer puxar dela dessa maneira, pode fornecer a URL do repositório remoto para o comando `git pull`.
Isso faz um pull único e não salva a URL como uma referência remota:

[source,console]
----
$ git pull https://github.com/onetimeguy/project
From https://github.com/onetimeguy/project
 * branch            HEAD       -> FETCH_HEAD
Merge made by the 'recursive' strategy.
----






[[r_what_is_introduced]]
==== Determinando o que é introduzido

(((branches, diffing)))
Agora você tem um branch de tópico que contém o trabalho contribuído.
Neste ponto, você pode determinar o que gostaria de fazer com ele.
Esta seção revisita alguns comandos para que você possa ver como usá-los para revisar exatamente o que será introduzido se você fizer o merge deste branch no seu branch principal.

Frequentemente, é útil revisar todos os commits que estão neste branch, mas que não estão no seu branch `master`.
Você pode excluir os commits no branch `master` adicionando a opção `--not` antes do nome do branch.
Isso faz a mesma coisa que o formato `master..contrib` que usamos anteriormente.
Por exemplo, se seu colaborador te enviar dois patches e você criar um branch chamado `contrib` e aplicar esses patches lá, você pode rodar o seguinte:

[source,console]
----
$ git log contrib --not master
commit 5b6235bd297351589efc4d73316f0a68d484f118
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Oct 24 09:53:59 2008 -0700

    Veja se isso ajuda o gem

commit 7482e0d16d04bea79d0dba8988cc78df655f16a0
Author: Scott Chacon <schacon@gmail.com>
Date:   Mon Oct 22 19:38:36 2008 -0700

    Atualizar gemspec para funcionar melhor
----

Para ver as alterações que cada commit introduziu, lembre-se de que você pode passar a opção `-p` para o `git log` e ele irá adicionar o diff introduzido em cada commit.

Para ver um diff completo do que aconteceria se você fizesse o merge deste branch de tópico com outro branch, pode ser necessário usar um truque para obter os resultados corretos.
Você pode pensar em rodar isso:

[source,console]
----
$ git diff master
----

Esse comando te dá um diff, mas pode ser enganoso.
Se o seu branch `master` avançou desde que você criou o branch de tópico a partir dele, você obterá resultados aparentemente estranhos.
Isso acontece porque o Git compara diretamente os snapshots do último commit do branch de tópico que você está e o snapshot do último commit no branch `master`.
Por exemplo, se você adicionou uma linha em um arquivo no branch `master`, uma comparação direta dos snapshots vai parecer que o branch de tópico vai remover essa linha.

Se o `master` for um ancestral direto do seu branch de tópico, isso não é um problema; mas se os dois históricos divergiram, o diff vai parecer que você está adicionando todas as novas alterações no seu branch de tópico e removendo tudo que é único no branch `master`.

O que você realmente quer ver são as alterações adicionadas ao branch de tópico -- o trabalho que você vai introduzir se fizer o merge deste branch com `master`.
Você faz isso fazendo o Git comparar o último commit do seu branch de tópico com o primeiro ancestral comum que ele tem com o branch `master`.

Tecnicamente, você pode fazer isso descobrindo explicitamente o ancestral comum e então rodando o diff sobre ele:

[source,console]
----
$ git merge-base contrib master
36c7dba2c95e6bbb78dfa822519ecfec6e1ca649
$ git diff 36c7db
----

ou, de maneira mais concisa:

[source,console]
----
$ git diff $(git merge-base contrib master)
----

No entanto, nenhum desses métodos é particularmente conveniente, então o Git fornece uma outra forma mais curta de fazer a mesma coisa: a sintaxe de três pontos.
No contexto do comando `git diff`, você pode colocar três pontos depois de outro branch para fazer um `diff` entre o último commit do branch em que você está e seu ancestral comum com outro branch:

[source,console]
----
$ git diff master...contrib
----

Este comando te mostra apenas o trabalho que o seu branch de tópico atual introduziu desde seu ancestral comum com o `master`.
Essa é uma sintaxe muito útil para lembrar.

==== Integrando o Trabalho Contribuído

(((integrating work)))
Quando todo o trabalho no seu branch de tópico estiver pronto para ser integrado em um branch mais principal, a pergunta é como fazer isso.
Além disso, qual fluxo de trabalho geral você deseja usar para manter seu projeto?
Você tem várias opções, então vamos cobrir algumas delas.

===== Fluxos de Trabalho de Merge

(((workflows, merging)))
Um fluxo de trabalho básico é simplesmente fazer o merge de todo aquele trabalho diretamente no seu branch `master`.
Neste cenário, você tem um branch `master` que contém basicamente o código estável.
Quando você tem trabalho em um branch de tópico que acha que está completo, ou trabalho que outra pessoa contribuiu e você verificou, você faz o merge dele no seu branch master, exclui o branch de tópico que acabou de ser integrado, e repete.

Por exemplo, se temos um repositório com trabalho em dois branches chamados `ruby_client` e `php_client` que se parece com <<rmerwf_a>>, e fazemos o merge de `ruby_client` seguido de `php_client`, seu histórico vai ficar assim <<rmerwf_b>>.

[[rmerwf_a]]
.Histórico com vários branches de tópico
image::images/merging-workflows-1.png[Histórico com vários branches de tópico]

[[rmerwf_b]]
.Depois de um merge de branch de tópico
image::images/merging-workflows-2.png[Depois de um merge de branch de tópico]

Esse é provavelmente o fluxo de trabalho mais simples, mas pode ser problemático se você estiver lidando com projetos maiores ou mais estáveis, onde você quer ser realmente cuidadoso com o que introduz.

Se você tem um projeto mais importante, talvez queira usar um ciclo de merge em duas fases.
Neste cenário, você tem dois branches de longa duração, `master` e `develop`, onde você determina que o `master` só será atualizado quando uma versão muito estável for criada e todo o novo código for integrado no branch `develop`.
Você empurra regularmente ambos os branches para o repositório público.
Cada vez que você tiver um novo branch de tópico para integrar (<<rmerwf_c>>), você faz o merge dele no `develop` (<<rmerwf_d>>); depois, quando você marcar uma versão, você faz o fast-forward do `master` para onde o `develop` agora está (<<rmerwf_e>>).

[[rmerwf_c]]
.Antes de um merge de branch de tópico
image::images/merging-workflows-3.png[Antes de um merge de branch de tópico]

[[rmerwf_d]]
.Depois de um merge de branch de tópico
image::images/merging-workflows-4.png[Depois de um merge de branch de tópico]

[[rmerwf_e]]
.Depois de uma versão do projeto
image::images/merging-workflows-5.png[Depois de uma versão do projeto]

Assim, quando as pessoas clonam o repositório do seu projeto, elas podem verificar o `master` para construir a versão estável mais recente e se manter atualizadas sobre isso facilmente, ou podem verificar o `develop`, que contém o conteúdo mais recente.
Você também pode estender esse conceito criando um branch `integrate` onde todo o trabalho é integrado.
Depois, quando o código nesse branch estiver estável e passar nos testes, você faz o merge dele no branch `develop`; e quando esse branch se provar estável por um tempo, você faz o fast-forward do seu branch `master`.

===== Fluxos de Trabalho de Merge Grande

(((workflows, "merging (large)")))
O projeto Git tem quatro branches de longa duração: `master`, `next`, e `seen` (anteriormente 'pu' -- atualizações propostas) para novo trabalho, e `maint` para manutenção de patches.
Quando um novo trabalho é introduzido por colaboradores, ele é coletado em branches de tópico no repositório do mantenedor de uma maneira semelhante ao que descrevemos (veja <<rmerwf_f>>).
Neste ponto, os tópicos são avaliados para determinar se estão seguros e prontos para consumo ou se precisam de mais trabalho.
Se estão seguros, eles são integrados no `next`, e esse branch é empurrado para que todos possam tentar os tópicos integrados.

[[rmerwf_f]]
.Gerenciando uma série complexa de branches de tópico paralelos contribuídos
image::images/large-merges-1.png[Gerenciando uma série complexa de branches de tópico paralelos contribuídos]

Se os tópicos ainda precisarem de trabalho, eles são integrados no `seen`.
Quando for determinado que estão totalmente estáveis, os tópicos são re-integrados no `master`.
Os branches `next` e `seen` então são reconstruídos a partir do `master`.
Isso significa que o `master` quase sempre avança, o `next` é rebaseado ocasionalmente, e o `seen` é rebaseado ainda mais frequentemente:

.Merging contribuições de tópicos em branches de integração de longo prazo
image::images/large-merges-2.png[Merging contribuições de tópicos em branches de integração de longo prazo]

Quando um branch de tópico finalmente for integrado no `master`, ele é removido do repositório.
O projeto Git também tem um branch `maint` que é derivado da última versão para fornecer patches retrocedidos caso seja necessária uma versão de manutenção.
Assim, quando você clona o repositório do Git, você tem quatro branches que pode verificar para avaliar o projeto em diferentes estágios de desenvolvimento, dependendo do quão avançado você quer estar ou como deseja contribuir; e o mantenedor tem um fluxo de trabalho estruturado para ajudá-lo a verificar novas contribuições. O fluxo de trabalho do projeto Git é especializado.
Para entender isso claramente, você pode conferir o https://github.com/git/git/blob/master/Documentation/howto/maintain-git.txt[Guia do Mantenedor do Git].

[[r_rebase_cherry_pick]]
===== Fluxos de Trabalho de Rebase e Cherry-Pick

(((fluxos de trabalho, rebase e cherry-pick)))
Outros mantenedores preferem fazer rebase ou cherry-pick do trabalho contribuído em cima de seu ramo `master`, em vez de mesclá-lo, para manter um histórico mais linear.
Quando você tem trabalho em um ramo de tópico e determinou que quer integrá-lo, você se move para esse ramo e executa o comando de rebase para reconstruir as mudanças em cima de seu ramo atual `master` (ou `develop`, e assim por diante).
Se isso funcionar bem, você pode avançar rapidamente seu ramo `master`, e acabará com um histórico de projeto linear.

(((comandos git, cherry-pick)))
A outra maneira de mover o trabalho introduzido de um ramo para outro é fazer cherry-pick.
Um cherry-pick no Git é como um rebase para um único commit.
Ele pega o patch que foi introduzido em um commit e tenta reaplicá-lo no ramo em que você está atualmente.
Isso é útil se você tiver vários commits em um ramo de tópico e quiser integrar apenas um deles, ou se você tiver apenas um commit em um ramo de tópico e preferir fazer cherry-pick ao invés de rodar o rebase.
Por exemplo, suponha que você tenha um projeto que se parece com isto:

.Exemplo de histórico antes de um cherry-pick
imagem::images/rebasing-1.png[Exemplo de histórico antes de um cherry-pick]

Se você quiser puxar o commit `e43a6` para o seu ramo `master`, você pode executar:

[source,console]
----
$ git cherry-pick e43a6
Finished one cherry-pick.
[master]: created a0a41a9: "Mensagem mais amigável ao falhar ao bloquear o índice."
 3 arquivos alterados, 17 inserções(+), 3 exclusões(-)
----

Isso puxa a mesma mudança introduzida em `e43a6`, mas você recebe um novo valor SHA-1 de commit, pois a data de aplicação é diferente.
Agora, seu histórico se parece com isto:

.Histórico após o cherry-pick de um commit em um ramo de tópico
imagem::images/rebasing-2.png[Histórico após o cherry-pick de um commit em um ramo de tópico]

Agora você pode remover seu ramo de tópico e descartar os commits que você não queria puxar.

===== Rerere

(((comandos git, rerere)))(((rerere)))
Se você está fazendo muitos merges e rebases, ou está mantendo um ramo de tópico de longa duração, o Git tem um recurso chamado ``rerere'' que pode ajudar.

Rerere significa ``reuse recorded resolution'' -- é uma maneira de agilizar a resolução manual de conflitos.
Quando o rerere está habilitado, o Git mantém um conjunto de imagens pré e pós de merges bem-sucedidos, e se notar que há um conflito que se parece exatamente com um que você já corrigiu, ele simplesmente usará a correção da última vez, sem incomodá-lo com isso.

Este recurso vem em duas partes: uma configuração e um comando.
A configuração é `rerere.enabled`, e é conveniente colocá-la na sua configuração global:

[source,console]
----
$ git config --global rerere.enabled true
----

Agora, sempre que você fizer um merge que resolva conflitos, a resolução será gravada no cache caso você precise dela no futuro.

Se necessário, você pode interagir com o cache do rerere usando o comando `git rerere`.
Quando invocado sozinho, o Git verifica seu banco de dados de resoluções e tenta encontrar uma correspondência com quaisquer conflitos de merge atuais e resolvê-los (embora isso seja feito automaticamente se `rerere.enabled` estiver definido como `true`).
Também existem subcomandos para ver o que será gravado, apagar uma resolução específica do cache e limpar o cache inteiro.
Nós cobriremos o rerere em mais detalhes em <<ch07-git-tools#r_rerere>>.

[[r_tagging_releases]]
==== Marcando Suas Releases

(((tags)))(((tags, signing)))
Quando você decidir cortar uma release, provavelmente você vai querer atribuir uma tag para poder recriar essa release a qualquer momento no futuro.
Você pode criar uma nova tag como discutido em <<ch02-git-basics#ch02-git-basics>>.
Se você decidir assinar a tag como mantenedor, a marcação pode se parecer com isto:

[source,console]
----
$ git tag -s v1.5 -m 'minha tag 1.5 assinada'
Você precisa de uma senha para desbloquear a chave secreta para
usuário: "Scott Chacon <schacon@gmail.com>"
Chave DSA de 1024 bits, ID F721C45A, criada em 09-02-2009
----

Se você assinar suas tags, pode ter o problema de distribuir a chave pública PGP usada para assinar suas tags.
O mantenedor do projeto Git resolveu esse problema incluindo sua chave pública como um blob no repositório e depois adicionando uma tag que aponta diretamente para esse conteúdo.
Para fazer isso, você pode descobrir qual chave você quer executando `gpg --list-keys`:

[source,console]
----
$ gpg --list-keys
/Users/schacon/.gnupg/pubring.gpg
---------------------------------
pub   1024D/F721C45A 2009-02-09 [expira: 2010-02-09]
uid                  Scott Chacon <schacon@gmail.com>
sub   2048g/45D02282 2009-02-09 [expira: 2010-02-09]
----

Então, você pode importar diretamente a chave para o banco de dados do Git exportando-a e passando-a por `git hash-object`, o que grava um novo blob com esse conteúdo no Git e retorna o SHA-1 do blob:

[source,console]
----
$ gpg -a --export F721C45A | git hash-object -w --stdin
659ef797d181633c87ec71ac3f9ba29fe5775b92
----

Agora que você tem o conteúdo da sua chave no Git, pode criar uma tag que aponte diretamente para ela especificando o novo valor SHA-1 que o comando `hash-object` forneceu:

[source,console]
----
$ git tag -a maintainer-pgp-pub 659ef797d181633c87ec71ac3f9ba29fe5775b92
----

Se você executar `git push --tags`, a tag `maintainer-pgp-pub` será compartilhada com todos.
Se alguém quiser verificar uma tag, pode importar diretamente sua chave PGP puxando o blob diretamente do banco de dados e importando-o para o GPG:

[source,console]
----
$ git show maintainer-pgp-pub | gpg --import
----

Eles podem usar essa chave para verificar todas as suas tags assinadas.
Além disso, se você incluir instruções na mensagem da tag, ao executar `git show <tag>`, você poderá fornecer ao usuário final instruções mais específicas sobre a verificação da tag.

[[r_build_number]]
==== Gerando um Número de Build

(((números de build)))(((comandos git, describe)))
Como o Git não possui números que aumentam monotonamente como 'v123' ou o equivalente para cada commit, se você quiser ter um nome legível para o ser humano junto a um commit, pode executar `git describe` nesse commit.
Em resposta, o Git gera uma string composta pelo nome da tag mais recente anterior a esse commit, seguida pelo número de commits desde essa tag, seguido finalmente por um valor parcial de SHA-1 do commit descrito (prefixado com a letra "g" significando Git):

[source,console]
----
$ git describe master
v1.6.2-rc1-20-g8c5b85c
----

Dessa forma, você pode exportar um snapshot ou build e nomeá-lo de uma maneira compreensível para as pessoas.
Na verdade, se você construir o Git a partir do código fonte clonado do repositório Git, `git --version` lhe dará algo assim.
Se você estiver descrevendo um commit que você tenha marcado diretamente, ele simplesmente dará o nome da tag.

Por padrão, o comando `git describe` requer tags anotadas (tags criadas com a flag `-a` ou `-s`); se você quiser aproveitar tags leves (não anotadas) também, adicione a opção `--tags` ao comando.
Você também pode usar essa string como alvo de um comando `git checkout` ou `git show`, embora dependa do valor abreviado de SHA-1 no final, então talvez não seja válido para sempre.
Por exemplo, o kernel do Linux recentemente passou de 8 para 10 caracteres para garantir a unicidade do objeto SHA-1, portanto, os nomes mais antigos do `git describe` foram invalidados.

[[r_preparing_release]]
==== Preparando uma Release

(((releases)))(((comandos git, archive)))
Agora você quer liberar uma build.
Uma das coisas que você vai querer fazer é criar um arquivo do último snapshot do seu código para aquelas almas perdidas que não usam Git.
O comando para fazer isso é o git archive:

[source,console]
----
$ git archive master --prefix='project/' | gzip > git describe master.tar.gz
$ ls *.tar.gz
v1.6.2-rc1-20-g8c5b85c.tar.gz
----

Se alguém abrir esse arquivo tar, eles obterão o último snapshot do seu projeto dentro de um diretório chamado "project".
Você também pode criar um arquivo zip de forma semelhante, mas passando a opção --format=zip para o git archive:

[source,console]
----
$ git archive master --prefix='project/' --format=zip > git describe master.zip
----

Agora você tem um arquivo tarball e um arquivo zip da release do seu projeto que pode carregar para o seu site ou enviar por email.

[[r_the_shortlog]]
==== O Shortlog

(((comandos git, shortlog)))
Agora é hora de enviar um e-mail para a lista de pessoas que querem saber o que está acontecendo no seu projeto.
Uma boa maneira de obter rapidamente um tipo de changelog do que foi adicionado ao seu projeto desde a sua última release ou e-mail é usar o comando git shortlog.
Ele resume todos os commits no intervalo que você especificar; por exemplo, o seguinte dá um resumo de todos os commits desde a sua última release, se sua última release foi nomeada v1.0.1:

[source,console]
----
$ git shortlog --no-merges master --not v1.0.1
Chris Wanstrath (6):
      Add support for annotated tags to Grit::Tag
      Add packed-refs annotated tag support.
      Add Grit::Commit#to_patch
      Update version and History.txt
      Remove stray puts
      Make ls_tree ignore nils

Tom Preston-Werner (4):
      fix dates in history
      dynamic version method
      Version bump to 1.0.2
      Regenerated gemspec for version 1.0.2
----

Você recebe um resumo limpo de todos os commits desde v1.0.1, agrupados por autor, que você pode enviar por e-mail para sua lista.

