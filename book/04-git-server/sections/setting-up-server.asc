[[r_setting_up_server]]
=== Configurando o Servidor

Vamos passar pelos passos para configurar o acesso SSH no lado do servidor.
Neste exemplo, você usará o método `authorized_keys` para autenticar seus usuários.
Também assumimos que você está usando uma distribuição Linux padrão como o Ubuntu.
Primeiro, crie um usuário `git` e um diretório `.ssh` para esse usuário.

[source,console]
----
$ sudo adduser git
$ su git
$ cd
$ mkdir .ssh && chmod 700 .ssh
$ touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys
----

Em seguida, você precisa adicionar algumas chaves públicas SSH de desenvolvedores ao arquivo `authorized_keys` para o usuário `git`.
Vamos supor que você tenha algumas chaves públicas confiáveis e as tenha salvo em arquivos temporários.
Novamente, as chaves públicas se parecem com isso:

[source,console]
----
$ cat /tmp/id_rsa.john.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
dAv8JggJICUvax2T9va5 gsg-keypair
----

Você apenas adiciona essas chaves ao arquivo `authorized_keys` do usuário `git` no diretório `.ssh`:

[source,console]
----
$ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
----

Agora, você pode configurar um repositório vazio para eles executando `git init` com a opção `--bare`, que inicializa o repositório sem um diretório de trabalho:

[source,console]
----
$ cd /srv/git
$ mkdir project.git
$ cd project.git
$ git init --bare
Initialized empty Git repository in /srv/git/project.git/
----

Então, John, Josie ou Jessica podem enviar a primeira versão de seu projeto para esse repositório, adicionando-o como um remoto e enviando uma branch.
Observe que alguém deve acessar a máquina e criar um repositório bare toda vez que você quiser adicionar um projeto.
Vamos usar `gitserver` como o nome do host do servidor no qual você configurou o usuário `git` e o repositório.
Se você estiver rodando internamente e configurou o DNS para que `gitserver` aponte para esse servidor, você pode usar os comandos quase da mesma forma (assumindo que `myproject` é um projeto existente com arquivos):

[source,console]
----
# no computador do John
$ cd myproject
$ git init
$ git add .
$ git commit -m 'initial commit'
$ git remote add origin git@gitserver:/srv/git/project.git
$ git push origin master
----

Neste ponto, os outros podem cloná-lo e enviar alterações de volta facilmente:

[source,console]
----
$ git clone git@gitserver:/srv/git/project.git
$ cd project
$ vim README
$ git commit -am 'fix for the README file'
$ git push origin master
----

Com este método, você pode rapidamente configurar um servidor Git de leitura/gravação para um pequeno grupo de desenvolvedores.

Você deve observar que, atualmente, todos esses usuários também podem fazer login no servidor e obter um shell como o usuário `git`.
Se você quiser restringir isso, será necessário alterar o shell para outra coisa no arquivo `passwd`.

Você pode facilmente restringir o usuário `git` para realizar apenas atividades do Git com uma ferramenta de shell limitada chamada `git-shell`, que acompanha o Git.
Se você configurar isso como o shell de login do seu usuário `git`, então o usuário `git` não poderá acessar o shell normalmente no seu servidor.
Para usar isso, especifique `git-shell` em vez de bash ou csh como o shell de login do seu usuário.
Para isso, primeiro adicione `git-shell` ao `/etc/shells` se ele ainda não estiver lá:

[source,console]
----
$ cat /etc/shells   # veja se `git-shell` já está lá. Se não...
$ which git-shell   # certifique-se de que git-shell está instalado no seu sistema.
$ sudo vim /etc/shells  # e adicione o caminho para git-shell do último comando
----

Agora você pode editar o shell de um usuário usando `chsh <nome_do_usuário>`:

[source,console]
----
$ sudo chsh git  # e insira o caminho para git-shell, geralmente: /usr/bin/git-shell
----

Agora, o usuário `git` só pode usar a conexão SSH para enviar e puxar repositórios Git e não pode acessar o shell na máquina.
Se você tentar, verá uma rejeição de login como esta:

[source,console]
----
$ ssh git@gitserver
fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have read and execute access.
Connection to gitserver closed.
----

Agora, os comandos de rede do Git ainda funcionarão normalmente, mas os usuários não poderão obter um shell.
Como o output afirma, você também pode configurar um diretório no diretório home do usuário `git` que personaliza um pouco o comando `git-shell`.
Por exemplo, você pode restringir os comandos Git que o servidor aceitará ou pode personalizar a mensagem que os usuários veem se tentarem acessar via SSH dessa maneira.
Execute `git help shell` para mais informações sobre como personalizar o shell.(((git commands, help)))
