[r_git_on_the_server]
=== Instalando o Git em um Servidor

Agora vamos abordar como configurar um serviço Git em seu próprio servidor.

[NOTE]
====
Aqui, vamos demonstrar os comandos e passos necessários para fazer instalações básicas e simplificadas em um servidor baseado em Linux, embora seja possível rodar esses serviços também em servidores Mac ou Windows.
A configuração de um servidor de produção dentro da sua infraestrutura certamente envolverá diferenças em medidas de segurança ou ferramentas do sistema operacional, mas esperamos que isso forneça uma ideia geral do que está envolvido.
====

Para configurar inicialmente qualquer servidor Git, você precisa exportar um repositório existente para um novo repositório bare — um repositório que não contém um diretório de trabalho.
Isso é geralmente simples de fazer.
Para clonar seu repositório e criar um novo repositório bare, você executa o comando de clonagem com a opção `--bare`.(((git commands, clone, bare)))
Por convenção, diretórios de repositórios bare terminam em `.git`, como segue:

[source,console]
----
$ git clone --bare meu_projeto meu_projeto.git
Clonando para repositório bare 'meu_projeto.git'...
feito.
----

Agora você deve ter uma cópia dos dados do diretório Git no diretório `meu_projeto.git`.

Isso é aproximadamente equivalente a algo como

[source,console]
----
$ cp -Rf meu_projeto/.git meu_projeto.git
----

Há algumas diferenças menores no arquivo de configuração; mas para o seu propósito, isso é praticamente a mesma coisa.
Ele pega o repositório Git sozinho, sem o diretório de trabalho, e cria um diretório especificamente para ele.

[r_bare_repo]
==== Colocando o Repositório Bare em um Servidor

Agora que você tem uma cópia bare do seu repositório, tudo o que você precisa fazer é colocá-lo em um servidor e configurar seus protocolos.
Vamos supor que você tenha configurado um servidor chamado `git.exemplo.com` ao qual você tem acesso SSH, e quer armazenar todos os seus repositórios Git no diretório `/srv/git`.
Assumindo que `/srv/git` exista nesse servidor, você pode configurar seu novo repositório copiando seu repositório bare:

[source,console]
----
$ scp -r meu_projeto.git usuario@git.exemplo.com:/srv/git
----

Neste ponto, outros usuários que têm acesso SSH ao mesmo servidor e que têm permissão de leitura no diretório `/srv/git` podem clonar seu repositório executando

[source,console]
----
$ git clone usuario@git.exemplo.com:/srv/git/meu_projeto.git
----

Se um usuário acessar o servidor via SSH e tiver permissão de escrita no diretório `/srv/git/meu_projeto.git`, ele também terá automaticamente acesso para enviar alterações (push).

O Git automaticamente adiciona permissões de escrita para o grupo corretamente se você executar o comando `git init` com a opção `--shared`.(((git commands, init, bare)))

[source,console]
----
$ ssh usuario@git.exemplo.com
$ cd /srv/git/meu_projeto.git
$ git init --bare --shared
----

Você vê como é fácil pegar um repositório Git, criar uma versão bare e colocá-la em um servidor ao qual você e seus colaboradores tenham acesso SSH.
Agora você está pronto para colaborar no mesmo projeto.

É importante notar que isso é literalmente tudo o que você precisa fazer para rodar um servidor Git útil, ao qual várias pessoas tenham acesso – basta adicionar contas SSH em um servidor e colocar um repositório bare em algum lugar onde todos esses usuários tenham acesso de leitura e escrita.
Você está pronto para começar – nada mais é necessário.

Nas próximas seções, você verá como expandir para configurações mais sofisticadas.
Esta discussão incluirá a criação de contas de usuário para cada usuário, adicionar acesso público de leitura aos repositórios, configurar interfaces web e mais.
No entanto, tenha em mente que para colaborar com algumas pessoas em um projeto privado, tudo o que você _precisa_ é de um servidor SSH e um repositório bare.

==== Configurações Simples

Se você é uma equipe pequena ou está apenas testando o Git em sua organização e tem apenas alguns desenvolvedores, as coisas podem ser simples para você.
Um dos aspectos mais complicados de configurar um servidor Git é o gerenciamento de usuários.
Se você quiser que alguns repositórios sejam apenas leitura para certos usuários e leitura/escrita para outros, o acesso e as permissões podem ser um pouco mais difíceis de arranjar.

===== Acesso SSH

(((serving repositories, SSH)))
Se você tem um servidor ao qual todos seus desenvolvedores já têm acesso SSH, geralmente é mais fácil configurar seu primeiro repositório lá, porque você não precisa fazer quase nenhum trabalho (como vimos na seção anterior).
Se você quiser permissões de controle de acesso mais complexas nos seus repositórios, pode gerenciá-las com as permissões de sistema de arquivos do sistema operacional que seu servidor usa.

Se você quiser colocar seus repositórios em um servidor que não tenha contas para todos na sua equipe que você deseja que tenham acesso de escrita, você deve configurar o acesso SSH para eles.
Assumimos que, se você tem um servidor com o qual fazer isso, você já tem um servidor SSH instalado, e é assim que você está acessando o servidor.

Existem algumas maneiras de dar acesso a todos na sua equipe.
A primeira é configurar contas para todos, o que é direto, mas pode ser trabalhoso.
Você pode não querer rodar `adduser` e configurar senhas temporárias para cada usuário.

Uma segunda maneira é criar um único usuário 'git' na máquina, pedir para cada usuário que deve ter acesso de escrita enviar sua chave pública SSH, e adicionar essa chave ao arquivo `~/.ssh/authorized_keys` do novo usuário 'git'.
Nesse ponto, todos poderão acessar essa máquina através do usuário 'git'.
Isso não afeta os dados de commit de nenhuma forma – o usuário SSH que você usa para conectar não afeta os commits registrados.

Outra maneira de fazer isso é ter o servidor SSH autenticar a partir de um servidor LDAP ou alguma outra fonte de autenticação centralizada que você já tenha configurado.
Enquanto cada usuário puder obter acesso ao shell na máquina, qualquer mecanismo de autenticação SSH que você possa imaginar deve funcionar.
