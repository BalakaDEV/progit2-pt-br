=== Smart HTTP

Agora temos acesso autenticado via SSH e acesso não autenticado através de `git://`, mas também existe um protocolo que pode fazer ambos ao mesmo tempo.

Configurar o Smart HTTP basicamente consiste em habilitar um script CGI fornecido com o Git, chamado `git-http-backend`, no servidor. Esse CGI irá ler o caminho e os cabeçalhos enviados por um `git fetch` ou `git push` para uma URL HTTP e determinar se o cliente pode se comunicar via HTTP (o que é verdade para qualquer cliente desde a versão 1.6.6). Se o CGI perceber que o cliente é "inteligente", ele irá se comunicar de forma eficiente, caso contrário, ele voltará para o comportamento "básico" (o que garante compatibilidade para leituras com clientes mais antigos).

Vamos seguir com uma configuração bem simples. Vamos configurá-la usando o Apache como o servidor CGI. Se você ainda não tem o Apache instalado, pode fazer isso em uma máquina Linux com algo como:

[source,console]
----
$ sudo apt-get install apache2 apache2-utils
$ a2enmod cgi alias env rewrite
----

Isso também habilita os módulos `mod_cgi`, `mod_alias`, `mod_env` e `mod_rewrite`, que são todos necessários para que isso funcione corretamente.

Você também precisará definir o grupo de usuários Unix dos diretórios `/srv/git` para `www-data`, para que o servidor web tenha acesso de leitura e gravação aos repositórios, porque a instância do Apache executando o script CGI estará (por padrão) sendo executada como esse usuário:

[source,console]
----
$ chgrp -R www-data /srv/git
----

Em seguida, precisamos adicionar algumas configurações no arquivo de configuração do Apache para que o `git-http-backend` seja o manipulador para qualquer requisição feita ao caminho `/git` no seu servidor web.

[source,console]
----
SetEnv GIT_PROJECT_ROOT /srv/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/lib/git-core/git-http-backend/
----

Se você deixar de fora a variável de ambiente `GIT_HTTP_EXPORT_ALL`, o Git servirá para clientes não autenticados apenas os repositórios que possuem o arquivo `git-daemon-export-ok`, assim como o fez o daemon do Git.

Por fim, você vai querer configurar o Apache para permitir requisições ao `git-http-backend` e autenticar as gravações de alguma forma, possivelmente com um bloco de autenticação como o seguinte:

[source,console]
----
RewriteEngine On
RewriteCond %{QUERY_STRING} service=git-receive-pack [OR]
RewriteCond %{REQUEST_URI} /git-receive-pack$
RewriteRule ^/git/ - [E=AUTHREQUIRED]

<Files "git-http-backend">
    AuthType Basic
    AuthName "Git Access"
    AuthUserFile /srv/git/.htpasswd
    Require valid-user
    Order deny,allow
    Deny from env=AUTHREQUIRED
    Satisfy any
</Files>
----

Isso vai exigir que você crie um arquivo `.htpasswd` contendo as senhas de todos os usuários válidos. Aqui está um exemplo de como adicionar um usuário chamado `schacon` ao arquivo:

[source,console]
----
$ htpasswd -c /srv/git/.htpasswd schacon
----

Existem várias formas de autenticar os usuários no Apache, você precisará escolher e implementar uma delas. Este é apenas o exemplo mais simples que conseguimos elaborar. Você também quase certamente desejará configurar isso sobre SSL para que todos esses dados sejam criptografados.

Não queremos nos aprofundar demais nos detalhes específicos de configuração do Apache, já que você pode estar usando outro servidor ou ter necessidades de autenticação diferentes. A ideia é que o Git venha com um CGI chamado `git-http-backend` que, quando invocado, fará toda a negociação para enviar e receber dados via HTTP. Ele não implementa autenticação por si só, mas isso pode ser facilmente controlado na camada do servidor web que o invoca. Você pode fazer isso com praticamente qualquer servidor web capaz de rodar CGI, então escolha o que você conhece melhor.

[NOTA]
====
Para mais informações sobre como configurar autenticação no Apache, consulte a documentação do Apache aqui: http://httpd.apache.org/docs/current/howto/auth.html[]
====
